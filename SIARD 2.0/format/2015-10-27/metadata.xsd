<?xml version="1.0" encoding="utf-8" ?>
<!-- $Workfile: metadata.xsd $	========================================
Metadata schema for SIARD-E (SIARD 2.0)
Version    : $Id: metadata.xsd 1205 2010-06-17 16:54:52Z hartwig $
Application: Software-Independent Archival of Relational Databases
Platform   : XML 1.0, XML Schema 2001
Description: This XML schema definition defines the structure
             of the metadata in the SIARD format
========================================================================
Copyright  : 2007, 2014, 2015, Swiss Federal Archives, Berne, Switzerland 
==================================================================== -->
<xs:schema id="metadata" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns="http://www.bar.admin.ch/xmlns/siard/2.0/metadata.xsd"
  targetNamespace="http://www.bar.admin.ch/xmlns/siard/2.0/metadata.xsd"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified">

  <!-- root element of an XML file conforming to this XML schema -->
  <xs:element name="siardArchive">
    <xs:complexType>
      <xs:annotation>
        <xs:documentation>
          Root element of meta data of the SIARD archive
        </xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <!-- name of the archived database -->
        <xs:element name="dbname" type="mandatoryString"/>
        <!-- short free form description of the database content -->
        <xs:element name="description" type="xs:string" minOccurs="0"/>
        <!-- name of person responsible for archiving the database -->
        <xs:element name="archiver" type="xs:string" minOccurs="0"/>
        <!-- contact data (telephone number or email address) of archiver -->
        <xs:element name="archiverContact" type="xs:string" minOccurs="0"/>
        <!-- name of data owner (section and institution responsible for data)
             of database when it was archived -->
        <xs:element name="dataOwner" type="mandatoryString"/>
        <!-- time span during which data where entered into the database -->
        <xs:element name="dataOriginTimespan" type="mandatoryString"/>
        <!--  root folder for external files (new in version 2.0) -->
        <xs:element name="lobFolder" type="xs:anyURI"  minOccurs="0"/>
        <!-- name and version of program that generated the metadata file -->
        <xs:element name="producerApplication" type="xs:string" minOccurs="0"/>
        <!-- date of creation of archive (automatically generated by SIARD) -->
        <xs:element name="archivalDate" type="xs:date"/>
        <!-- message digest code over all primary data in folder "content" -->
        <xs:element name="messageDigest" type="messageDigestType" minOccurs="0" maxOccurs="unbounded"/>
        <!-- DNS name of client machine from which SIARD was running for archiving -->
        <xs:element name="clientMachine" type="xs:string" minOccurs="0"/>
        <!-- name of database product and version from which database originates -->
        <xs:element name ="databaseProduct" type="xs:string" minOccurs="0"/>
        <!-- connection string used for archiving -->
        <xs:element name="connection" type="xs:string" minOccurs="0"/>
        <!-- database user used for archiving -->
        <xs:element name="databaseUser" type="xs:string" minOccurs="0"/>
        <!--  list of schemas in database  -->
        <xs:element name="schemas" type="schemasType"/>
        <!-- list of users in the archived database -->
        <xs:element name="users" type="usersType"/>
        <!-- list of roles in the archived database -->
        <xs:element name="roles" type="rolesType" minOccurs="0"/>
        <!-- list of privileges in the archived database -->
        <xs:element name="privileges" type="privilegesType" minOccurs="0"/>
      </xs:sequence>
      <!-- constraint: version number must be 1.0 or 2.0 -->
      <xs:attribute name="version" type="versionType" use="required" />
    </xs:complexType>
  </xs:element>

  <!-- complex type schemas -->
  <xs:complexType name="schemasType">
    <xs:annotation>
      <xs:documentation>
        List of schemas
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="schema" type="schemaType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <!-- complex type schema -->
  <xs:complexType name="schemaType">
    <xs:annotation>
      <xs:documentation>
        Schema element in siardArchive
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- database name of the schema -->
      <xs:element name="name" type="xs:string" />
      <!-- archive name of the schema folder -->
      <xs:element name="folder" type="fsName"/>
      <!-- description of the schema's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
      <!--  list of advanced and structured types in the schema (new in version 2.0) -->
      <xs:element name="types" type="typesType" minOccurs="0"/>
      <!-- list of tables in the schema -->
      <xs:element name="tables" type="tablesType"/>
      <!-- list of views in the schema -->
      <xs:element name="views" type="viewsType" minOccurs="0"/>
      <!-- list of routines in the schema -->
      <xs:element name="routines" type="routinesType" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <!-- complex type types (new in version 2.0) -->
  <xs:complexType name="typesType">
    <xs:annotation>
      <xs:documentation>
        List of advanced or structured data types types
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="type" type="typeType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>
  
  <!-- complex type type (new in version 2.0) -->
  <xs:complexType name="typeType">
    <xs:annotation>
      <xs:documentation>
        Advanced or structured data tape type
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!--  name of data type  -->
      <xs:element name="name" type="xs:string"/>
      <!--  category of data type -->
      <xs:element name="category" type="categoryType"/>
      <!--  schema of supertype -->
      <xs:element name="underSchema" type="xs:string" minOccurs="0"/>
      <!--  name of supertype -->
      <xs:element name="underType" type="xs:string" minOccurs="0"/>
      <!-- instantiability if data type (never true for DISTINCT) -->
      <xs:element name="instantiable" type="xs:boolean"/>
      <!-- finality (always true for DISTINCT, never true for structured UDTs) -->
      <xs:element name="final" type="xs:boolean"/>
      <!--  primitive base SQL:2008 type of (DISTINCT, ARRAY) type -->
      <xs:element name="base" type="xs:string" minOccurs="0"/>
      <!--  SQL_1999 cardinality of ARRAY type -->
      <xs:element name="cardinality" type="xs:integer" minOccurs="0"/>
      <!--  alternatively list of attributes (ROW, UDT) -->
      <xs:element name="attributes" type="attributesType" minOccurs="0"/>
      <!-- description of the parameter's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <!-- complex type attributes (new in version 2.0) -->
  <xs:complexType name="attributesType">
    <xs:annotation>
      <xs:documentation>
        List of attributes of a type
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="attribute" type="attributeType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>
  
  <!-- complex type attribute (new in version 2.0) -->
  <xs:complexType name="attributeType">
    <xs:annotation>
      <xs:documentation>
        Attribute of a type
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- database name of the attribute -->
      <xs:element name="name" type="xs:string" />
      <xs:choice> <!-- new in version 2.0: either built-in or structured -->
        <xs:sequence>
          <!-- SQL:2008 data type of the column -->
          <xs:element name="type" type="builtinTypeType" />
	        <!-- original data type of the column -->
	        <xs:element name="typeOriginal" type="xs:string" minOccurs="0"/>
        </xs:sequence>
	      <xs:sequence>
	        <!-- SQL:2008 schema of advanced or structured data type of the attribute -->
	        <xs:element name="typeSchema" type="xs:string" minOccurs="0" />
	        <!-- SQL:2008 name of advanced or structured data type of the attribute -->
	        <xs:element name="typeName" type="xs:string" />
	        <!-- SQL:2008 attribute list of the column (recursive) -->
	        <xs:element name="attributes" type="attributesType" minOccurs="0"/>
	      </xs:sequence>
      </xs:choice>
      <!-- default value -->
      <xs:element name="defaultValue" type="xs:string" minOccurs="0"/>
      <!-- description of the attributes's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  
  <!-- complex type tables -->
  <xs:complexType name="tablesType">
    <xs:annotation>
      <xs:documentation>
        List of tables
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="table" type="tableType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <!-- complex type table -->
  <xs:complexType name="tableType">
    <xs:annotation>
      <xs:documentation>
        Table element in siardArchive
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- database name of the table -->
      <xs:element name="name" type="xs:string"/>
      <!-- archive name of the table folder -->
      <xs:element name="folder" type="fsName"/>
      <!-- description of the table's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
      <!-- list of columns of the table -->
      <xs:element name="columns" type="columnsType"/>
      <!--  primary key -->
      <xs:element name="primaryKey" type="primaryKeyType" minOccurs="0"/>
      <!--  foreign keys  -->
      <xs:element name="foreignKeys" type="foreignKeysType" minOccurs="0"/>
      <!--  candidate keys (unique constraints)  -->
      <xs:element name="candidateKeys" type="candidateKeysType" minOccurs="0"/>
      <!-- list of (check) constraints -->
      <xs:element name="checkConstraints" type="checkConstraintsType" minOccurs="0"/>
      <!--  list of triggers  -->
      <xs:element name="triggers" type="triggersType" minOccurs="0"/>
      <!--  number of rows in the table -->
      <xs:element name="rows" type="xs:integer"/>
    </xs:sequence>
  </xs:complexType>

  <!-- complex type views -->
  <xs:complexType name="viewsType">
    <xs:annotation>
      <xs:documentation>
        List of views
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="view" type="viewType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <!-- complex type view -->
  <xs:complexType name="viewType">
    <xs:annotation>
      <xs:documentation>
        View element in siardArchive
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- database name of the view -->
      <xs:element name="name" type="xs:string" />
      <!-- SQL query string defining the view -->
      <xs:element name="query" type="xs:string" minOccurs="0"/>
      <!-- original query string defining the view -->
      <xs:element name="queryOriginal" type="xs:string" minOccurs="0"/>
      <!-- description of the view's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
      <!-- list of columns of the view -->
      <xs:element name="columns" type="columnsType"/>
      <!--  number of rows in the view - added in 2014! -->
      <xs:element name="rows" type="xs:integer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <!-- complex type columns -->
  <xs:complexType name="columnsType">
    <xs:annotation>
      <xs:documentation>
        List of columns
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="column" type="columnType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <!-- complex type column -->
  <xs:complexType name="columnType">
    <xs:annotation>
      <xs:documentation>
        Column element in siardArchive
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- database name of the column -->
      <xs:element name="name" type="xs:string" />
      <!-- archive name of the internally stored LOBs within containing 
           element -->
      <xs:element name="folder" type="fsName" minOccurs="0"/>
      <!--  folder for LOBs relative to lobFolder of nearest containing 
            element for internally or externally stored LOBs 
            (new in version 2.0) -->
      <xs:element name="lobFolder" type="xs:anyURI"  minOccurs="0"/>
      <xs:choice> <!-- new in version 2.0: either built-in or structured -->
        <xs:sequence>
          <!-- SQL:2008 data type of the column -->
          <xs:element name="type" type="builtinTypeType" />
	        <!-- original data type of the column -->
	        <xs:element name="typeOriginal" type="xs:string" minOccurs="0"/>
		      <!-- nullability (default: true) -->
		      <xs:element name="nullable" type="xs:boolean" minOccurs="0"/>
        </xs:sequence>
	      <xs:sequence> <!--  new in version 2.0 -->
	        <!-- SQL:2008 schema of UDT name of the column (new in version 2.0) -->
	        <xs:element name="typeSchema" type="xs:string" minOccurs="0" />
	        <!-- SQL:2008 name of UDT of the column (new in version 2.0) -->
	        <xs:element name="typeName" type="xs:string" />
	        <!-- SQL:2008 attribute list of the column (new in version 2.0) -->
	        <xs:element name="fields" type="fieldsType" minOccurs="0"/>
	      </xs:sequence>
      </xs:choice>
      <!-- default value -->
      <xs:element name="defaultValue" type="xs:string" minOccurs="0"/>
      <!-- unique, references, check column constraints 
           are stored as table constraints -->
      <!--  mimeType makes sense only for LOBs and is only informatory-->
      <xs:element name="mimeType" type="xs:string" minOccurs="0"/>
      <!-- description of the column's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  
  <!-- complex type fields -->
  <xs:complexType name="fieldsType">
    <xs:annotation>
      <xs:documentation>
        List of fields of a column or field
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="field" type="fieldType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <!-- complex type for type of a column or a field -->
  <xs:complexType name="fieldType">
    <xs:annotation>
      <xs:documentation>
        Field element describing the type of a field
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- archive name of the internally stored LOBs within containing 
           element -->
      <xs:element name="folder" type="fsName" minOccurs="0"/>
      <!--  folder for LOBs relative to lobFolder of nearest containing 
            element for internally or externally stored LOBs 
            (new in version 2.0) -->
      <xs:element name="lobFolder" type="xs:anyURI"  minOccurs="0"/>
      <!-- SQL:2008 attribute list of the column (new in version 2.0) -->
      <xs:element name="fields" type="fieldsType" minOccurs="0"/>
      <!--  mimeType makes sense only for LOBs and is only informatory-->
      <xs:element name="mimeType" type="xs:string" minOccurs="0"/>
      <!-- description of the field's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  
  <!-- complex type primaryKey -->
  <xs:complexType name="primaryKeyType">
    <xs:annotation>
      <xs:documentation>
        primaryKey element in siardArchive
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- database name of the primary key -->
      <xs:element name="name" type="xs:string" minOccurs="0" />
       <!-- description of the primary key's meaning and content -->
       <xs:element name="description" type="xs:string" minOccurs="0"/>
      <!-- columns belonging to the primary key -->
      <xs:element name="column" type="xs:string"  minOccurs="1" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <!-- complex type foreignKeys -->
  <xs:complexType name="foreignKeysType">
    <xs:annotation>
      <xs:documentation>
        List of foreign key constraints
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="foreignKey" type="foreignKeyType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <!-- complex type foreignKey -->
  <xs:complexType name="foreignKeyType">
    <xs:annotation>
      <xs:documentation>
        foreignKey element in siardArchive
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- database name of the foreign key -->
      <xs:element name="name" type="xs:string" />
      <!--  referenced schema -->
      <xs:element name="referencedSchema" type="xs:string"/>
      <!-- referenced table -->
      <xs:element name="referencedTable" type="xs:string"/>
      <!--  references -->
      <xs:element name="reference" type="referenceType" minOccurs="1" maxOccurs="unbounded"/> 
      <!-- match type (FULL, PARTIAL, SIMPLE) -->
      <xs:element name="matchType" type="matchTypeType" minOccurs="0"/>
      <!-- ON DELETE action e.g. ON DELETE CASCADE -->
      <xs:element name="deleteAction" type="xs:string" minOccurs="0"/>
      <!-- ON UPDATE action e.g. ON UPDATE SET DEFAULT -->
      <xs:element name="updateAction" type="xs:string" minOccurs="0"/>
      <!-- description of the foreign key's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <!-- complex type reference -->
  <xs:complexType name="referenceType">
    <xs:annotation>
      <xs:documentation>
        reference element in siardArchive
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- referencing column -->
      <xs:element name="column" type="xs:string"/>
      <!-- referenced column (table.column) -->
      <xs:element name="referenced" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>

  <!-- complex type candidateKeys -->
  <xs:complexType name="candidateKeysType">
    <xs:annotation>
      <xs:documentation>
        List of candidate key (unique) constraints
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="candidateKey" type="candidateKeyType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <!-- complex type candidateKey -->
  <xs:complexType name="candidateKeyType">
    <xs:annotation>
      <xs:documentation>
        candiate key (unique) element in siardArchive
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- database name of the candidate key -->
      <xs:element name="name" type="xs:string"/>
       <!-- description of the candidate key's meaning and content -->
       <xs:element name="description" type="xs:string" minOccurs="0"/>
      <!-- columns belonging to the candidate key -->
      <xs:element name="column" type="xs:string"  minOccurs="1" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <!-- complex type check constraints -->
  <xs:complexType name="checkConstraintsType">
    <xs:annotation>
      <xs:documentation>
        List of check constraints
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="checkConstraint" type="checkConstraintType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <!-- complex type check constraint -->
  <xs:complexType name="checkConstraintType">
    <xs:annotation>
      <xs:documentation>
        Check constraint element in siardArchive
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- database name of the constraint -->
      <xs:element name="name" type="xs:string"/>
      <!-- check condition -->
      <xs:element name="condition" type="xs:string"/>
      <!-- description of the constraint's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <!-- complex type triggers -->
  <xs:complexType name="triggersType">
    <xs:annotation>
      <xs:documentation>
        List of triggers
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="trigger" type="triggerType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>
  
  <!-- complex type trigger -->
  <xs:complexType name="triggerType">
    <xs:annotation>
      <xs:documentation>
        Trigger element in siardArchive
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- database name of the trigger -->
      <xs:element name="name" type="xs:string" />
      <!--  action time BEFORE, AFTER or INSTEAD OF -->
      <xs:element name="actionTime" type="actionTimeType"/>
      <!--  trigger event INSERT, DELETE, UPDATE [OF <trigger column list>] -->
      <xs:element name="triggerEvent" type="xs:string"/>
      <!--  alias list <old or new values alias> -->
      <xs:element name="aliasList" type="xs:string" minOccurs="0"/>
      <!--  triggered action -->
      <xs:element name="triggeredAction" type="xs:string"/>
      <!-- description of the trigger's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  
  <!-- complex type routines -->
  <xs:complexType name="routinesType">
    <xs:annotation>
      <xs:documentation>
        List of routines
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="routine" type="routineType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <!-- complex type routine -->
  <xs:complexType name="routineType">
    <xs:annotation>
      <xs:documentation>
        Routine
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- database name of routine in schema -->
      <xs:element name="name" type="xs:string"/>
      <!-- description of the routines's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
      <!-- original source code (VBA, PL/SQL, ...) defining the routine -->
      <xs:element name="source" type="xs:string" minOccurs="0"/>
      <!--  SQL:2008 body of routine  -->
      <xs:element name="body" type="xs:string" minOccurs="0"/>
      <!--  routine characteristic -->
      <xs:element name="characteristic" type="xs:string" minOccurs="0"/>
      <!--  SQL:2008 data type of the return value (for functions) -->
      <xs:element name="returnType" type="xs:string" minOccurs="0"/>
      <!--  list of parameters -->
      <xs:element name="parameters" type="parametersType" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  
  <!-- complex type parameters -->
  <xs:complexType name="parametersType">
    <xs:annotation>
      <xs:documentation>
        List of parameters of a routine
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="parameter" type="parameterType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>
  
  <!-- complex type parameter -->
  <xs:complexType name="parameterType">
    <xs:annotation>
      <xs:documentation>
        Parameter of a routine
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!--  name of parameter  -->
      <xs:element name="name" type="xs:string"/>
      <!--  mode of parameter (IN, OUT, INOUT) -->
      <xs:element name="mode" type="xs:string"/>
      <xs:choice> <!-- new in version 2.0: either built-in or structured -->
        <xs:sequence>
          <!-- SQL:2008 data type of the column -->
          <xs:element name="type" type="builtinTypeType" />
	        <!-- original data type of the column -->
	        <xs:element name="typeOriginal" type="xs:string" minOccurs="0"/>
        </xs:sequence>
	      <xs:sequence> <!--  new in version 2.0 -->
	        <!-- SQL:2008 schema of UDT name of the column (new in version 2.0) -->
	        <xs:element name="typeSchema" type="xs:string" minOccurs="0" />
	        <!-- SQL:2008 name of UDT of the column (new in version 2.0) -->
	        <xs:element name="typeName" type="xs:string" />
	        <!-- SQL:2008 attribute list of the column (new in version 2.0) -->
	        <xs:element name="parameterFields" type="parameterFieldsType" minOccurs="0"/>
	      </xs:sequence>
      </xs:choice>
      <!-- description of the parameter's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <!-- complex type parameterFields (new in version 2.0) -->
  <xs:complexType name="parameterFieldsType">
    <xs:annotation>
      <xs:documentation>
        List of fields of a parameter
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="parameterField" type="parameterFieldType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <!-- complex type for type of a parameter or a parameter field (new in version 2.0) -->
  <xs:complexType name="parameterFieldType">
    <xs:annotation>
      <xs:documentation>
        Field element describing the type of a parameter or a parameter field
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- SQL:2008 attribute list of the column (new in version 2.0) -->
      <xs:element name="parameterFields" type="parameterFieldsType" minOccurs="0"/>
      <!-- description of the parameter field's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  
  <!-- complex type users -->
  <xs:complexType name="usersType">
    <xs:annotation>
      <xs:documentation>
        List of users
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="user" type="userType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <!-- complex type user -->
  <xs:complexType name="userType">
    <xs:annotation>
      <xs:documentation>
        User
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- user name -->
      <xs:element name="name" type="xs:string"/>
      <!-- description of the user's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <!-- complex type roles -->
  <xs:complexType name="rolesType">
    <xs:annotation>
      <xs:documentation>
        List of roles
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="role" type="roleType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <!-- complex type role -->
  <xs:complexType name="roleType">
    <xs:annotation>
      <xs:documentation>
        Role
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- role name -->
      <xs:element name="name" type="xs:string"/>
      <!-- role ADMIN (user or role) -->
      <xs:element name="admin" type="xs:string"/>
      <!-- description of the role's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <!-- complex type privileges -->
  <xs:complexType name="privilegesType">
    <xs:annotation>
      <xs:documentation>
        List of grants
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="privilege" type="privilegeType" minOccurs="1" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <!-- complex type privilege -->
  <xs:complexType name="privilegeType">
    <xs:annotation>
      <xs:documentation>
        Grant (incl. grant of role)
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <!-- privilege type (incl. ROLE privilege or "ALL PRIVILEGES" -->
      <xs:element name="type" type="xs:string"/>
      <!-- privilege object (may be omitted for ROLE privilege) -->
      <xs:element name="object" type="xs:string" minOccurs="0"/>
      <!-- GRANTED BY -->
      <xs:element name="grantor" type="xs:string"/>
      <!-- user list of users or roles or single value "PUBLIC" -->
      <xs:element name="grantee" type="xs:string"/>
      <!-- optional option "GRANT" or "ADMIN" -->
      <xs:element name="option" type="privOptionType" minOccurs="0"/>
      <!-- description of the grant's meaning and content -->
      <xs:element name="description" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:simpleType name="builtinTypeType">
    <xs:annotation>
      <xs:documentation>
        builtinTypeType is constrained to valid SQL:2008 data type values
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <!-- exact numerics (BIGINT from SQL:2008) -->
      <xs:pattern value="INTEGER|INT|SMALLINT|BIGINT"/>
      <xs:pattern value="NUMERIC(\([1-9]\d*(,[1-9]\d*)?\))?"/>
      <xs:pattern value="DECIMAL(\([1-9]\d*(,[1-9]\d*)?\))?"/>
      <!-- approximate numerics -->
      <xs:pattern value="REAL|DOUBLE PRECISION"/>
      <xs:pattern value="FLOAT(\([1-9]\d*\))?"/>
      <!-- character strings -->
      <xs:pattern value="(CHARACTER|CHAR)(\([1-9]\d*\))?"/>
      <xs:pattern value="(CHARACTER VARYING|CHAR VARYING|VARCHAR)(\([1-9]\d*\))"/>
      <xs:pattern value="(CHARACTER LARGE OBJECT|CLOB)(\([1-9]\d*(K|M|G)?\))?"/>
      <xs:pattern value="(NATIONAL CHARACTER|NATIONAL CHAR|NCHAR)(\([1-9]\d*\))?"/>
      <xs:pattern value="(NATIONAL CHARACTER VARYING|NATIONAL CHAR VARYING|NCHAR VARYING)(\([1-9]\d*\))"></xs:pattern>
      <xs:pattern value="(NATIONAL CHARACTER LARGE OBJECT|NCHAR LARGE OBJECT|NCLOB)(\([1-9]\d*(K|M|G)?\))?"/>
      <xs:pattern value="XML"/>
      <!-- BIT and BINARY strings -->
      <xs:pattern value="BIT(\([1-9]\d*\))?"/>
      <xs:pattern value="BIT VARYING(\([1-9]\d*\))"/>
      <xs:pattern value="(BINARY LARGE OBJECT|BLOB)(\([1-9]\d*(K|M|G)?\))?"/>
      <!-- BINARY strings from SQL:2008 -->
      <xs:pattern value="BINARY(\([1-9]\d*\))?"/>
      <xs:pattern value="(BINARY VARYING|VARBINARY)(\([1-9]\d*\))"/>
      <!-- datetimes -->
      <xs:pattern value="DATE"/>
      <xs:pattern value="(TIME|TIME WITH TIME ZONE)(\([1-9]\d*\))?"/>
      <xs:pattern value="(TIMESTAMP|TIMESTAMP WITH TIME ZONE)(\((0|([1-9]\d*))\))?"/>
      <!--  intervals -->
      <xs:pattern value="INTERVAL (YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\([1-9]\d*\))?( TO (MONTH|DAY|HOUR|MINUTE|SECOND)(\([1-9]\d*\))?)?"/>
      <!-- BOOLEAN -->
      <xs:pattern value="BOOLEAN"/>
    </xs:restriction>
  </xs:simpleType>
  
  <!--  simple type for messageDigest in a single field -->
  <xs:simpleType name="messageDigestType">
    <xs:annotation><xs:documentation>
      Message digests with prefix "MD5", "SHA-1" or "SHA-256:" followed by hexadecimal or - for the SHA variants - Base64 code. 
    </xs:documentation></xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(MD5[0-9a-fA-F]{32})|(SHA-1[0-9a-fA-F]{40})|(SHA-1[A-Za-z0-9\+/]{27}=)|(SHA-256:[0-9a-fA-F]{64})|(SHA-256:[A-Za-z0-9\+/]{43}=)"/>
    </xs:restriction>
  </xs:simpleType>
  
  <!-- simple type for version number -->
  <xs:simpleType name="versionType">
    <xs:annotation>
      <xs:documentation>
        versionType must be constrained to "1.0" or "2.0"
        for conformity with this XML schema
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="collapse"/>
      <xs:enumeration value="1.0"/>
      <xs:enumeration value="2.0"/>
    </xs:restriction>
  </xs:simpleType>

  <!-- simple type for privilege option -->
  <xs:simpleType name="privOptionType">
    <xs:annotation>
      <xs:documentation>
        privOptionType must be "ADMIN" or "GRANT"
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="collapse"/>
      <xs:enumeration value="ADMIN"/>
      <xs:enumeration value="GRANT"/>
    </xs:restriction>
  </xs:simpleType>

  <!-- simple type for mandatory string 
       which must contain at least 1 character -->
  <xs:simpleType name="mandatoryString">
    <xs:annotation>
      <xs:documentation>
        mandatoryString must contain at least 1 character
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  
  <!-- simple type of a filesystem (file or folder) name -->
  <xs:simpleType name="fsName">
    <xs:annotation>
      <xs:documentation>
        fsNames may only consist of ASCII characters and digits
        and must start with a non-digit 
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="([a-z]|[A-Z])([a-z]|[A-Z]|[0-9]).*" />
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>
  
  <!-- simple type for action time of a trigger -->
  <xs:simpleType name="actionTimeType">
    <xs:annotation>
      <xs:documentation>
        actionTime is BEFORE or AFTER
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="BEFORE" />
      <xs:enumeration value="AFTER" />
    </xs:restriction>
  </xs:simpleType>
  
  <!-- simple type for match type of a foreign key -->
  <xs:simpleType name="matchTypeType">
    <xs:annotation>
      <xs:documentation>
        matchType is FULL, PARTIAL or SIMPLE
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="FULL" />
      <xs:enumeration value="PARTIAL" />
      <xs:enumeration value="SIMPLE" />
    </xs:restriction>
  </xs:simpleType>

  <!-- simple type for the category of a column or a parameter (new in version 2.0) -->
  <xs:simpleType name="categoryType">
    <xs:annotation>
      <xs:documentation>
        category of advanced or structured data types is "distinct", 
        "row", "array", or "udt" 
        for conformity with this XLM schema
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="collapse"/>
      <xs:enumeration value="distinct"/>
      <xs:enumeration value="row"/>
      <xs:enumeration value="array"/>
      <xs:enumeration value="udt"/>
    </xs:restriction>
  </xs:simpleType>
  
</xs:schema>
